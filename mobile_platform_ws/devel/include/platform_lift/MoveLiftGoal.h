// Generated by gencpp from file platform_lift/MoveLiftGoal.msg
// DO NOT EDIT!


#ifndef PLATFORM_LIFT_MESSAGE_MOVELIFTGOAL_H
#define PLATFORM_LIFT_MESSAGE_MOVELIFTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace platform_lift
{
template <class ContainerAllocator>
struct MoveLiftGoal_
{
  typedef MoveLiftGoal_<ContainerAllocator> Type;

  MoveLiftGoal_()
    : goal_position(0)  {
    }
  MoveLiftGoal_(const ContainerAllocator& _alloc)
    : goal_position(0)  {
  (void)_alloc;
    }



   typedef uint16_t _goal_position_type;
  _goal_position_type goal_position;





  typedef boost::shared_ptr< ::platform_lift::MoveLiftGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::platform_lift::MoveLiftGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveLiftGoal_

typedef ::platform_lift::MoveLiftGoal_<std::allocator<void> > MoveLiftGoal;

typedef boost::shared_ptr< ::platform_lift::MoveLiftGoal > MoveLiftGoalPtr;
typedef boost::shared_ptr< ::platform_lift::MoveLiftGoal const> MoveLiftGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::platform_lift::MoveLiftGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::platform_lift::MoveLiftGoal_<ContainerAllocator1> & lhs, const ::platform_lift::MoveLiftGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal_position == rhs.goal_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::platform_lift::MoveLiftGoal_<ContainerAllocator1> & lhs, const ::platform_lift::MoveLiftGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace platform_lift

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::platform_lift::MoveLiftGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platform_lift::MoveLiftGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platform_lift::MoveLiftGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ade19871d93a0d47c904b5b9a7a247f";
  }

  static const char* value(const ::platform_lift::MoveLiftGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ade19871d93a0d4ULL;
  static const uint64_t static_value2 = 0x7c904b5b9a7a247fULL;
};

template<class ContainerAllocator>
struct DataType< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "platform_lift/MoveLiftGoal";
  }

  static const char* value(const ::platform_lift::MoveLiftGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint16 goal_position  \n"
;
  }

  static const char* value(const ::platform_lift::MoveLiftGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveLiftGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::platform_lift::MoveLiftGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::platform_lift::MoveLiftGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.goal_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLATFORM_LIFT_MESSAGE_MOVELIFTGOAL_H
